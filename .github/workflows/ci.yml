name: CI & Deploy

on:
  pull_request:
    branches: [main]

  push:
    branches: [main]

jobs:
  lint-backend:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        working-directory: ./apps/backend
        run: npm ci

      - name: Run ESLint with reviewdog
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workdir: ./apps/backend
          reporter: github-pr-review
          eslint_flags: '. --ext .ts,.js'

  tests-and-coverage:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports: [5432:5432]
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_DATABASE: testdb
      DB_USERNAME: testuser
      DB_PASSWORD: testpass
      JWT_SECRET: testsecret

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install backend dependencies
        working-directory: ./apps/backend
        run: npm ci

      - name: Run backend tests with coverage
        working-directory: ./apps/backend
        run: npm run test:cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: backend
          directory: ./apps/backend/coverage

  deploy-backend:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deploy Hook
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND_URL }}

  deploy-frontend:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/mobile
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel (CLI)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          vercel --prod --token $VERCEL_TOKEN --yes
